"""
JIRA Workflow Helper for Autonomous SRE Agents
Provides standardized methods for JIRA workflow compliance, state transitions, and structured commenting
"""

import os
import yaml
import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
from enum import Enum

from .jira_mcp_tools import AtlassianMCPManager
from .jsm_specialized_tools import JSMIncidentUpdaterTool
from ..jsm_state_manager import JSMStateManager, WorkflowState

logger = logging.getLogger(__name__)

class JiraWorkflowHelper:
    """
    Helper class for ensuring JIRA workflow compliance across all SRE agents
    Provides standardized methods for state transitions and structured commenting
    """
    
    def __init__(self, config_path: str = "src/autonomous_sre_bot/config"):
        self.config_path = config_path
        self.state_manager = JSMStateManager(config_path)
        self.incident_updater = JSMIncidentUpdaterTool()
        self.jira_manager = AtlassianMCPManager()
        
        # Load workflow standards
        self.workflow_standards = self._load_workflow_standards()
        
    def _load_workflow_standards(self) -> Dict[str, Any]:
        """Load JIRA workflow compliance standards from configuration"""
        try:
            tasks_config_path = os.path.join(self.config_path, "self_heal_tasks.yaml")
            with open(tasks_config_path, 'r') as f:
                config = yaml.safe_load(f)
                return config.get('jira_workflow_standards', {})
        except Exception as e:
            logger.warning(f"Could not load workflow standards: {e}")
            return {}
    
    def create_structured_comment(self, 
                                agent_name: str,
                                findings: str,
                                actions: str,
                                next_steps: str,
                                evidence: str = "",
                                current_state: str = "",
                                target_state: str = "") -> str:
        """
        Create a structured comment following the JIRA workflow standards
        
        Args:
            agent_name: Name of the agent creating the comment
            findings: Key findings or analysis results
            actions: Actions taken during this phase
            next_steps: Planned next steps or recommendations
            evidence: Supporting evidence, links, or data
            current_state: Current workflow state
            target_state: Target workflow state (if transitioning)
            
        Returns:
            Formatted comment string
        """
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
        
        comment_parts = [
            f"## 🤖 Autonomous SRE Bot Update",
            f"**Agent:** {agent_name}",
            f"**Timestamp:** {timestamp}"
        ]
        
        if current_state and target_state:
            comment_parts.extend([
                f"**State Transition:** {current_state} → {target_state}"
            ])
        elif current_state:
            comment_parts.extend([
                f"**Current State:** {current_state}"
            ])
        
        comment_parts.extend([
            "",
            "### 🔍 Findings:",
            findings,
            "",
            "### ⚡ Actions Taken:",
            actions,
            "",
            "### 📋 Next Steps:",
            next_steps
        ])
        
        if evidence:
            comment_parts.extend([
                "",
                "### 📊 Evidence/Links:",
                evidence
            ])
        
        comment_parts.extend([
            "",
            f"---",
            f"*Generated by Autonomous SRE Bot at {timestamp}*"
        ])
        
        return "\n".join(comment_parts)
    
    def update_and_transition(self,
                            incident_key: str,
                            agent_name: str,
                            target_state: WorkflowState,
                            findings: str,
                            actions: str,
                            next_steps: str,
                            evidence: str = "",
                            metadata: Optional[Dict[str, Any]] = None) -> Tuple[bool, str]:
        """
        Update JIRA incident with structured comment and transition to new state
        
        Args:
            incident_key: JIRA incident key
            agent_name: Name of the agent performing the update
            target_state: Target workflow state
            findings: Key findings or analysis results
            actions: Actions taken during this phase
            next_steps: Planned next steps or recommendations
            evidence: Supporting evidence, links, or data
            metadata: Additional metadata for the state transition
            
        Returns:
            Tuple of (success, message)
        """
        try:
            # Get current state
            current_state, _ = self.state_manager.get_incident_current_state(incident_key)
            
            # Create structured comment
            comment = self.create_structured_comment(
                agent_name=agent_name,
                findings=findings,
                actions=actions,
                next_steps=next_steps,
                evidence=evidence,
                current_state=current_state.name if current_state else "",
                target_state=target_state.name
            )
            
            # Add comment to JIRA first
            update_result = self.incident_updater._run(
                incident_key=incident_key,
                content=comment,
                update_type="analysis"
            )
            
            if "✅" not in update_result:
                return False, f"Failed to add comment: {update_result}"
            
            # Transition to new state
            transition_result = self.state_manager.transition_incident_state(
                incident_key=incident_key,
                new_state=target_state,
                metadata=metadata
            )
            
            if transition_result:
                logger.info(f"Successfully updated and transitioned {incident_key} to {target_state.name}")
                return True, f"Successfully updated {incident_key} and transitioned to {target_state.name}"
            else:
                return False, f"Comment added but state transition failed for {incident_key}"
                
        except Exception as e:
            error_msg = f"Error updating and transitioning {incident_key}: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def add_progress_update(self,
                          incident_key: str,
                          agent_name: str,
                          progress_details: str,
                          technical_details: str = "",
                          links: str = "") -> Tuple[bool, str]:
        """
        Add a progress update to JIRA without state transition
        
        Args:
            incident_key: JIRA incident key
            agent_name: Name of the agent providing the update
            progress_details: Progress update details
            technical_details: Technical details or analysis
            links: Relevant links or references
            
        Returns:
            Tuple of (success, message)
        """
        try:
            comment = self.create_structured_comment(
                agent_name=agent_name,
                findings=progress_details,
                actions=technical_details,
                next_steps="Continuing with current workflow phase",
                evidence=links
            )
            
            result = self.incident_updater._run(
                incident_key=incident_key,
                content=comment,
                update_type="progress"
            )
            
            success = "✅" in result
            return success, result
            
        except Exception as e:
            error_msg = f"Error adding progress update to {incident_key}: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def escalate_to_human(self,
                         incident_key: str,
                         agent_name: str,
                         escalation_reason: str,
                         analysis_summary: str,
                         recommendations: str) -> Tuple[bool, str]:
        """
        Escalate incident to human intervention with detailed reasoning
        
        Args:
            incident_key: JIRA incident key
            agent_name: Name of the agent escalating
            escalation_reason: Reason for escalation
            analysis_summary: Summary of analysis performed
            recommendations: Recommendations for human intervention
            
        Returns:
            Tuple of (success, message)
        """
        try:
            escalation_metadata = {
                "escalation_reason": escalation_reason,
                "escalating_agent": agent_name,
                "escalation_timestamp": datetime.now().isoformat()
            }
            
            return self.update_and_transition(
                incident_key=incident_key,
                agent_name=agent_name,
                target_state=WorkflowState.REQUIRES_HUMAN,
                findings=f"🚨 **ESCALATION REQUIRED** 🚨\n\n**Reason:** {escalation_reason}",
                actions=analysis_summary,
                next_steps=f"**Human intervention required:**\n{recommendations}",
                evidence="Please review the analysis above and take appropriate action.",
                metadata=escalation_metadata
            )
            
        except Exception as e:
            error_msg = f"Error escalating {incident_key}: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def mark_resolution_complete(self,
                               incident_key: str,
                               agent_name: str,
                               resolution_summary: str,
                               validation_results: str,
                               lessons_learned: str = "",
                               preventive_measures: str = "") -> Tuple[bool, str]:
        """
        Mark incident as completely resolved with comprehensive documentation
        
        Args:
            incident_key: JIRA incident key
            agent_name: Name of the agent completing resolution
            resolution_summary: Summary of the resolution
            validation_results: Results of post-fix validation
            lessons_learned: Lessons learned from this incident
            preventive_measures: Preventive measures implemented
            
        Returns:
            Tuple of (success, message)
        """
        try:
            resolution_details = f"""
**Resolution Summary:**
{resolution_summary}

**Validation Results:**
{validation_results}
"""
            
            if lessons_learned:
                resolution_details += f"\n**Lessons Learned:**\n{lessons_learned}"
            
            if preventive_measures:
                resolution_details += f"\n**Preventive Measures:**\n{preventive_measures}"
            
            resolution_metadata = {
                "resolution_agent": agent_name,
                "resolution_timestamp": datetime.now().isoformat(),
                "validation_completed": True,
                "automated_resolution": True
            }
            
            return self.update_and_transition(
                incident_key=incident_key,
                agent_name=agent_name,
                target_state=WorkflowState.RESOLVED,
                findings="✅ **INCIDENT RESOLVED** ✅",
                actions=resolution_details,
                next_steps="Incident resolution complete. No further action required.",
                evidence="All validation checks passed. System is stable.",
                metadata=resolution_metadata
            )
            
        except Exception as e:
            error_msg = f"Error marking {incident_key} as resolved: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def validate_workflow_compliance(self, incident_key: str) -> Dict[str, Any]:
        """
        Validate that an incident follows proper workflow compliance
        
        Args:
            incident_key: JIRA incident key to validate
            
        Returns:
            Validation results dictionary
        """
        try:
            current_state, incident_data = self.state_manager.get_incident_current_state(incident_key)
            
            # Check for required comments and transitions
            validation_results = {
                "incident_key": incident_key,
                "current_state": current_state.name if current_state else "Unknown",
                "compliance_issues": [],
                "recommendations": []
            }
            
            # Add validation logic here based on workflow standards
            mandatory_transitions = self.workflow_standards.get('mandatory_transitions', [])
            
            # This could be expanded with more sophisticated compliance checking
            logger.info(f"Workflow compliance validation completed for {incident_key}")
            return validation_results
            
        except Exception as e:
            logger.error(f"Error validating workflow compliance for {incident_key}: {e}")
            return {
                "incident_key": incident_key,
                "error": str(e),
                "compliance_issues": ["Validation failed due to error"],
                "recommendations": ["Manual review required"]
            }
