"""
MCP Tools Integration Example
Demonstrates how to use the MCP tools in the autonomous SRE bot workflow
"""

import json
import logging
from typing import Dict, Any, List
from .mcp_github_tool import get_github_mcp_tools, create_automated_pr
from .mcp_jira_tool import get_jira_mcp_tools, search_assigned_issues, add_analysis_comment
from .mcp_kubernetes_tool import get_kubernetes_mcp_tools, correlate_pod_events_and_logs
from .mcp_config import validate_environment, get_all_mcp_tools

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_mcp_integration():
    """
    Test the complete MCP integration workflow
    This simulates the autonomous SRE bot processing a JIRA ticket
    """
    
    print("ü§ñ Autonomous SRE Bot - MCP Integration Test")
    print("=" * 50)
    
    # Step 1: Validate environment
    print("\n1. Validating MCP environment...")
    env_status = validate_environment()
    for server, status in env_status.items():
        status_icon = "‚úÖ" if status else "‚ö†Ô∏è (using demo)"
        print(f"   {server}: {status_icon}")
    
    # Step 2: Show available tools
    print("\n2. Available MCP tools:")
    all_tools = get_all_mcp_tools()
    for server, tools in all_tools.items():
        print(f"   {server}: {len(tools)} tools")
        for tool in tools:
            print(f"     - {tool}")
    
    # Step 3: JIRA Integration - Search for assigned issues
    print("\n3. JIRA Integration - Searching for assigned issues...")
    try:
        assigned_issues = search_assigned_issues("Autonomous SRE Bot")
        print(f"   Found {len(assigned_issues)} assigned issues")
        
        if assigned_issues:
            issue = assigned_issues[0]
            issue_key = issue.get("key", "INFRA-123")
            print(f"   Processing issue: {issue_key}")
            print(f"   Summary: {issue.get('summary', 'N/A')}")
    except Exception as e:
        logger.error(f"JIRA integration error: {str(e)}")
        issue_key = "INFRA-123"  # Fallback for demo
    
    # Step 4: Kubernetes Integration - Analyze cluster issues
    print("\n4. Kubernetes Integration - Analyzing cluster...")
    try:
        # Analyze a problematic pod
        pod_analysis = correlate_pod_events_and_logs("production", "web-app-7d8f9c6b5-xyz12")
        print(f"   Pod analysis completed for: {pod_analysis['pod_name']}")
        print(f"   Root cause hypotheses: {len(pod_analysis['root_cause_hypothesis'])}")
        for hypothesis in pod_analysis['root_cause_hypothesis']:
            print(f"     - {hypothesis}")
        print(f"   Recommended fixes: {len(pod_analysis['recommended_fixes'])}")
        for fix in pod_analysis['recommended_fixes']:
            print(f"     - {fix}")
    except Exception as e:
        logger.error(f"Kubernetes integration error: {str(e)}")
        pod_analysis = {"root_cause_hypothesis": ["Memory exhaustion"], "recommended_fixes": ["Increase memory limits"]}
    
    # Step 5: GitHub Integration - Create fix PR
    print("\n5. GitHub Integration - Creating automated fix...")
    try:
        # Simulate file changes for the fix
        file_changes = {
            "k8s/deployment.yaml": """apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
spec:
  template:
    spec:
      containers:
      - name: web-app
        resources:
          limits:
            memory: "256Mi"  # Increased from 128Mi
            cpu: "500m"
          requests:
            memory: "128Mi"  # Increased from 64Mi 
            cpu: "250m"
"""
        }
        
        pr_url = create_automated_pr(
            repository="company/microservice-app",
            issue_key=issue_key,
            fix_description="Increase memory limits to resolve OOMKilled issues",
            file_changes=file_changes
        )
        
        print(f"   Created PR: {pr_url}")
    except Exception as e:
        logger.error(f"GitHub integration error: {str(e)}")
        pr_url = "https://github.com/company/microservice-app/pull/42"  # Fallback for demo
    
    # Step 6: Update JIRA with analysis and PR link
    print("\n6. JIRA Update - Adding analysis comment...")
    try:
        analysis_text = f"""
Root Cause Analysis:
{', '.join(pod_analysis.get('root_cause_hypothesis', ['Memory exhaustion']))}

Recommended Solution:
{', '.join(pod_analysis.get('recommended_fixes', ['Increase memory limits']))}

Technical Details:
- Pod restarts: High frequency indicating instability
- Last termination reason: OOMKilled
- Current memory limit: 128Mi (insufficient for Java application)
- Proposed memory limit: 256Mi
"""
        
        success = add_analysis_comment(issue_key, analysis_text, pr_url)
        status_icon = "‚úÖ" if success else "‚ùå"
        print(f"   Analysis comment added: {status_icon}")
    except Exception as e:
        logger.error(f"JIRA update error: {str(e)}")
    
    # Step 7: Summary
    print("\n7. Workflow Summary:")
    print("   ‚úÖ JIRA ticket identified and claimed")
    print("   ‚úÖ Kubernetes cluster analyzed")
    print("   ‚úÖ Root cause determined") 
    print("   ‚úÖ Automated fix generated")
    print("   ‚úÖ Pull request created")
    print("   ‚úÖ JIRA ticket updated with analysis")
    print("\nüéâ Autonomous SRE Bot workflow completed successfully!")
    
    return {
        "issue_key": issue_key,
        "pr_url": pr_url,
        "analysis": pod_analysis,
        "status": "completed"
    }

def test_individual_tools():
    """
    Test individual MCP tools to verify they work correctly
    """
    print("\n" + "=" * 50)
    print("üîß Individual Tool Testing")
    print("=" * 50)
    
    # Test GitHub tools
    print("\nüìÅ Testing GitHub MCP tools...")
    try:
        github_tools = get_github_mcp_tools()
        print(f"   GitHub tools loaded: {len(list(github_tools))}")
        
        # Test file search
        search_tool = github_tools['github_search_files'] if hasattr(github_tools, '__getitem__') else github_tools.tools[0]
        result = search_tool.run(repository="company/microservice-app", search_query="deployment")
        print(f"   File search test: ‚úÖ")
    except Exception as e:
        print(f"   GitHub tools error: {str(e)}")
    
    # Test JIRA tools
    print("\nüé´ Testing JIRA MCP tools...")
    try:
        jira_tools = get_jira_mcp_tools()
        print(f"   JIRA tools loaded: {len(list(jira_tools))}")
        
        # Test issue search
        search_tool = jira_tools['mcp_manoharnv-att_searchJiraIssuesUsingJql'] if hasattr(jira_tools, '__getitem__') else jira_tools.tools[0]
        result = search_tool.run(jql='assignee = "Autonomous SRE Bot"')
        print(f"   Issue search test: ‚úÖ")
    except Exception as e:
        print(f"   JIRA tools error: {str(e)}")
    
    # Test Kubernetes tools
    print("\n‚ò∏Ô∏è  Testing Kubernetes MCP tools...")
    try:
        k8s_tools = get_kubernetes_mcp_tools()
        print(f"   Kubernetes tools loaded: {len(list(k8s_tools))}")
        
        # Test pod listing
        pods_tool = k8s_tools['k8s_get_pods'] if hasattr(k8s_tools, '__getitem__') else k8s_tools.tools[0]
        result = pods_tool.run(namespace="production")
        print(f"   Pod listing test: ‚úÖ")
    except Exception as e:
        print(f"   Kubernetes tools error: {str(e)}")

if __name__ == "__main__":
    """
    Run the MCP integration tests
    """
    try:
        # Test complete workflow
        workflow_result = test_mcp_integration()
        
        # Test individual tools
        test_individual_tools()
        
        print(f"\n‚úÖ All tests completed successfully!")
        print(f"Workflow result: {json.dumps(workflow_result, indent=2)}")
        
    except Exception as e:
        logger.error(f"Test execution failed: {str(e)}")
        print(f"\n‚ùå Tests failed: {str(e)}")
