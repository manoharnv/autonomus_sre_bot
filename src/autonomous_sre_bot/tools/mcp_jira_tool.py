"""
MCP JIRA Tool Configuration for CrewAI
Leverages Atlassian MCP server for JIRA operations
"""

from crewai_tools import MCPServerAdapter
from typing import List, Optional, Dict, Any
import json
import logging
import os
from datetime import datetime

logger = logging.getLogger(__name__)

class JiraMCPManager:
    """
    Manager class for JIRA MCP server integration
    Handles connection and tool management for JIRA operations
    """
    
    def __init__(self):
        self._setup_logging()
        self.server_params = self._get_jira_server_params()
    
    def _setup_logging(self):
        """Setup logging for JIRA MCP operations"""
        os.makedirs('logs', exist_ok=True)
        handler = logging.FileHandler('logs/mcp_jira.log')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
    
    def _get_jira_server_params(self):
        """
        Get JIRA MCP server parameters
        
        Uses Atlassian MCP server for JIRA operations
        """
        # Atlassian MCP Server (SSE)
        jira_sse_params = {
            "url": "https://mcp.atlassian.com/v1/sse",
            "transport": "sse",
            "headers": {
                "Authorization": f"Bearer {os.getenv('ATLASSIAN_TOKEN', 'demo-token')}",
                "X-Atlassian-Cloud-Id": os.getenv('ATLASSIAN_CLOUD_ID', 'demo-cloud-id')
            }
        }
        
        return jira_sse_params
    
    def get_mcp_tools(self, tool_names: Optional[List[str]] = None):
        """
        Get JIRA MCP tools for use in CrewAI agents
        
        Args:
            tool_names: Optional list of specific tool names to filter
            
        Returns:
            MCPServerAdapter configured for JIRA operations
        """
        if tool_names:
            return MCPServerAdapter(self.server_params, *tool_names)
        else:
            return MCPServerAdapter(self.server_params)


# Factory function to get JIRA MCP tools for agents
def get_jira_mcp_tools(tool_names: Optional[List[str]] = None):
    """
    Factory function to get JIRA MCP tools for CrewAI agents
    
    Usage in agents:
        from tools.mcp_jira_tool import get_jira_mcp_tools
        
        # Get all JIRA tools
        jira_tools = get_jira_mcp_tools()
        
        # Get specific tools  
        specific_tools = get_jira_mcp_tools(['mcp_manoharnv-att_searchJiraIssuesUsingJql'])
    """
    manager = JiraMCPManager()
    return manager.get_mcp_tools(tool_names)


# Convenience functions for common JIRA operations
def search_assigned_issues(assignee: str = "Autonomous SRE Bot") -> List[Dict[str, Any]]:
    """Search for issues assigned to the bot"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_searchJiraIssuesUsingJql'])
    search_tool = tools['mcp_manoharnv-att_searchJiraIssuesUsingJql']
    
    jql = f'assignee = "{assignee}" AND status IN ("To Do", "In Progress") ORDER BY priority DESC, created ASC'
    result = search_tool.run(jql=jql)
    
    parsed_result = json.loads(result)
    return parsed_result.get("issues", [])


def get_issue_details(issue_key: str) -> Dict[str, Any]:
    """Get detailed information about a specific issue"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_getJiraIssue'])
    get_tool = tools['mcp_manoharnv-att_getJiraIssue']
    
    result = get_tool.run(issueIdOrKey=issue_key)
    return json.loads(result)


def add_analysis_comment(issue_key: str, analysis: str, pr_url: Optional[str] = None) -> bool:
    """Add analysis comment to JIRA issue"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_addCommentToJiraIssue'])
    comment_tool = tools['mcp_manoharnv-att_addCommentToJiraIssue']
    
    comment_body = f"""
## ðŸ¤– Autonomous SRE Bot Analysis

**Root Cause Analysis:**
{analysis}

**Actions Taken:**
"""
    
    if pr_url:
        comment_body += f"- Created automated fix PR: {pr_url}\n"
    
    comment_body += """
- Analyzed K8s events and logs
- Identified configuration issues
- Generated proposed solution

**Status:** Analysis complete, awaiting human review of proposed changes.

---
*Generated by Autonomous SRE Bot v1.0*
"""
    
    result = comment_tool.run(
        issueIdOrKey=issue_key,
        commentBody=comment_body
    )
    
    parsed_result = json.loads(result)
    return parsed_result.get("success", False)


def transition_to_in_progress(issue_key: str) -> bool:
    """Transition issue to In Progress status"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_transitionJiraIssue'])
    transition_tool = tools['mcp_manoharnv-att_transitionJiraIssue']
    
    result = transition_tool.run(
        issueIdOrKey=issue_key,
        transition={"id": "11"}  # To Do â†’ In Progress
    )
    
    parsed_result = json.loads(result)
    return parsed_result.get("success", False)


def transition_to_code_review(issue_key: str) -> bool:
    """Transition issue to Code Review status after creating PR"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_transitionJiraIssue'])
    transition_tool = tools['mcp_manoharnv-att_transitionJiraIssue']
    
    result = transition_tool.run(
        issueIdOrKey=issue_key,
        transition={"id": "21"}  # In Progress â†’ Code Review
    )
    
    parsed_result = json.loads(result)
    return parsed_result.get("success", False)


def add_pr_link_to_issue(issue_key: str, pr_url: str) -> bool:
    """Add PR link as a comment and update issue fields"""
    manager = JiraMCPManager()
    tools = manager.get_mcp_tools(['mcp_manoharnv-att_addCommentToJiraIssue'])
    comment_tool = tools['mcp_manoharnv-att_addCommentToJiraIssue']
    
    comment_body = f"""
## ðŸ”— Pull Request Created

**PR Link:** {pr_url}

The autonomous SRE bot has created a pull request with the proposed fix. Please review the changes before merging.

**Next Steps:**
1. Review the PR changes
2. Run any additional tests if needed
3. Merge the PR when satisfied
4. Monitor the deployment for resolution

---
*Automated by SRE Bot*
"""
    
    result = comment_tool.run(
        issueIdOrKey=issue_key,
        commentBody=comment_body
    )
    
    parsed_result = json.loads(result)
    return parsed_result.get("success", False)
