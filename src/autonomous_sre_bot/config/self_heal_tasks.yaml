# Autonomous SRE Self-Healing Crew - Task Configuration

# Task 1: Monitor JIRA for New Incidents
monitor_jira_incidents:
  description: >
    Monitor JIRA Service Management for new incidents that require automated resolution.
    Use the JSM monitoring tools to search for recently created incidents with high priority 
    or specific keywords that indicate infrastructure or application issues. Filter for incidents 
    that can be automatically resolved based on predefined criteria.
    
    Tools available:
    - jsm_monitor_service_desk: Monitor queues and recent requests
    - jsm_search_knowledge: Search for existing solutions
    - jsm_monitor_sla: Check SLA status for prioritization
  expected_output: >
    A structured report containing:
    - List of new incidents requiring automated attention with JSM keys
    - Priority assessment and SLA requirements from JSM data
    - Initial classification of incident types
    - Knowledge base search results for similar issues
    - Recommendation on which incidents should proceed to automated resolution
    Format: JSON with incident details, priority levels, SLA status, and automation feasibility
  agent: jira_monitor

# Task 2: Analyze Root Cause in Kubernetes
analyze_kubernetes_root_cause:
  description: >
    Perform comprehensive root cause analysis for the identified incidents by examining
    Kubernetes cluster state, pod health, events, and logs. Correlate multiple data sources
    to identify the underlying cause of the issue. Focus on resource constraints, configuration
    issues, and application failures. Update the JSM incident with analysis findings.
    
    Tools available:
    - jsm_update_incident: Add root cause analysis to the incident
    - jsm_create_incident: Create new incidents if additional issues found
    - Kubernetes analysis tools for cluster inspection
  expected_output: >
    A detailed root cause analysis report containing:
    - Problematic pods and their current state
    - Relevant Kubernetes events and error patterns
    - Log analysis with key error messages
    - Resource utilization assessment
    - Root cause hypothesis with supporting evidence
    - Confidence level in the analysis
    - JSM incident updated with analysis findings
    Format: Structured analysis with evidence, hypothesis, recommended fix approach, and JSM update confirmation
  agent: root_cause_analyzer
  context:
    - monitor_jira_incidents

# Task 3: Generate Automated Fix and Create Pull Request
generate_code_fix_and_pr:
  description: >
    Based on the root cause analysis, generate specific code fixes to resolve the identified
    issues and create a pull request with the changes. Create Kubernetes manifest updates, 
    configuration changes, or application fixes as appropriate. Ensure fixes are minimal, 
    targeted, and follow best practices. Then create a new branch using the JSM ticket ID 
    and submit a pull request.
    
    Workflow:
    1. Generate the specific code fixes based on root cause analysis
    2. Create a new branch with format: {JSM_TICKET_ID}-automated-fix
    3. Commit changes to the new branch
    4. Create pull request with proper title and description
    5. Update JSM incident with PR details and progress
    
    Tools available:
    - jsm_update_incident: Add progress updates, technical findings, and PR links
    - GitHub MCP tools: repo access, file operations, branch creation, PR management
    - Code generation and fix creation tools
  expected_output: >
    A comprehensive fix and PR package containing:
    - Specific code changes or configuration updates
    - Kubernetes manifest modifications (if applicable)  
    - Environment variable or resource limit adjustments
    - Test cases or validation criteria for the fix
    - New branch created with JSM ticket ID prefix
    - Pull request created with proper documentation
    - PR title format: [{JSM_TICKET_ID}] Automated fix for {issue_summary}
    - PR description linking back to JSM incident
    - Implementation notes and rollback procedures
    - JSM incident updated with fix details, PR URL, and progress
    Format: Combined fix implementation and PR creation report with links and JSM update confirmation
  agent: code_fix_generator
  context:
    - monitor_jira_incidents
    - analyze_kubernetes_root_cause

# Task 4: Monitor Deployment and Verify Resolution
monitor_deployment_verification:
monitor_deployment_verification:
  description: >
    Monitor the deployment of the fix through CI/CD pipeline and verify that the incident
    is fully resolved. Check pod health, application metrics, and ensure no new issues
    are introduced. Update the original JIRA incident with resolution status and close it.
    
    Tools available:
    - jsm_resolve_incident: Mark incident as resolved
    - jsm_update_incident: Add final resolution details
    - jsm_monitor_sla: Verify SLA compliance post-resolution
  expected_output: >
    A complete resolution verification report containing:
    - Deployment status and success confirmation
    - Post-deployment health checks and monitoring results
    - Verification that the original issue is resolved
    - Any new issues or side effects detected
    - JIRA incident updated with resolution details and closed
    - SLA compliance verification
    - Lessons learned and process improvements
    Format: Final status report with deployment outcomes, incident closure confirmation, and JSM resolution
  agent: deployment_monitor
  context:
    - monitor_jira_incidents
    - analyze_kubernetes_root_cause
    - generate_code_fix_and_pr

# Crew-level Configuration
crew_config:
  process: sequential
  verbose: 2
  memory: true
  max_rpm: 10
  share_crew: false
